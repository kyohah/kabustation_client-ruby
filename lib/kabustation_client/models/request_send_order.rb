=begin
#kabuステーションAPI

## 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

The version of the OpenAPI document: 1.5

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module KabustationClient
  class RequestSendOrder
    # 注文パスワード
    attr_accessor :password

    # 銘柄コード
    attr_accessor :symbol

    # 市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>   </tbody> </table>
    attr_accessor :exchange

    # 商品種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>株式</td>       </tr>   </tbody> </table>
    attr_accessor :security_type

    # 売買区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>売</td>       </tr>       <tr>           <td>2</td>           <td>買</td>       </tr>   </tbody> </table>
    attr_accessor :side

    # 信用区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>現物</td>       </tr>       <tr>           <td>2</td>           <td>新規</td>       </tr>       <tr>           <td>3</td>           <td>返済</td>       </tr>   </tbody> </table>
    attr_accessor :cash_margin

    # 信用取引区分<br>※現物取引の場合は指定不要。<br>※信用取引の場合、必須。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>制度信用</td>       </tr>       <tr>           <td>2</td>           <td>一般信用（長期）</td>       </tr>       <tr>           <td>3</td>           <td>一般信用（デイトレ）</td>       </tr>   </tbody> </table>
    attr_accessor :margin_trade_type

    # １株あたりのプレミアム料(円)<br>  ※プレミアム料の刻値は、プレミアム料取得APIのレスポンスにある\"TickMarginPremium\"にてご確認ください。<br> ※入札受付中(19:30～20:30)プレミアム料入札可能銘柄の場合、「MarginPremiumUnit」は必須となります。<br> ※入札受付中(19:30～20:30)のプレミアム料入札可能銘柄以外の場合は、「MarginPremiumUnit」の記載は無視されます。<br> ※入札受付中以外の時間帯では、「MarginPremiumUnit」の記載は無視されます。
    attr_accessor :margin_premium_unit

    # 受渡区分<br>※現物買は指定必須。<br>※現物売は「0(指定なし)」を設定<br>※信用新規は「0(指定なし)」を設定<br>※信用返済は指定必須 <br>※auマネーコネクトが有効の場合にのみ、「3」を設定可能 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0</td>           <td>指定なし</td>       </tr>       <tr>           <td>2</td>           <td>お預り金</td>       </tr>       <tr>           <td>3</td>           <td>auマネーコネクト</td>       </tr>   </tbody> </table>
    attr_accessor :deliv_type

    # 資産区分（預り区分）<br>※現物買は、指定必須。<br>※現物売は、「'  '」 半角スペース2つを指定必須。<br>※信用新規と信用返済は、「11」を指定するか、または指定なしでも可。指定しない場合は「11」が自動的にセットされます。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>(半角スペース2つ)</td>           <td>現物売の場合</td>       </tr>       <tr>           <td>02</td>           <td>保護</td>       </tr>       <tr>           <td>AA</td>           <td>信用代用</td>       </tr>       <tr>           <td>11</td>           <td>信用取引</td>       </tr>   </tbody> </table>
    attr_accessor :fund_type

    # 口座種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>一般</td>       </tr>       <tr>           <td>4</td>           <td>特定</td>       </tr>       <tr>           <td>12</td>           <td>法人</td>       </tr>   </tbody> </table>
    attr_accessor :account_type

    # 注文数量<br>※信用一括返済の場合、返済したい合計数量を入力してください。
    attr_accessor :qty

    # 決済順序<br>※信用返済の場合、必須。<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0</td>           <td>日付（古い順）、損益（高い順）</td>       </tr>       <tr>           <td>1</td>           <td>日付（古い順）、損益（低い順）</td>       </tr>       <tr>           <td>2</td>           <td>日付（新しい順）、損益（高い順）</td>       </tr>       <tr>           <td>3</td>           <td>日付（新しい順）、損益（低い順）</td>       </tr>       <tr>           <td>4</td>           <td>損益（高い順）、日付（古い順）</td>       </tr>       <tr>           <td>5</td>           <td>損益（高い順）、日付（新しい順）</td>       </tr>       <tr>           <td>6</td>           <td>損益（低い順）、日付（古い順）</td>       </tr>       <tr>           <td>7</td>           <td>損益（低い順）、日付（新しい順）</td>       </tr>   </tbody> </table>
    attr_accessor :close_position_order

    # 返済建玉指定<br>※信用返済の場合、必須。<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。<br>※信用一括返済の場合、各建玉IDと返済したい数量を入力してください。<br>※建玉IDは「E」から始まる番号です。
    attr_accessor :close_positions

    # 執行条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>           <th>”Price\"の指定</th>       </tr>   </thead>   <tbody>       <tr>           <td>10</td>           <td>成行</td>           <td>0</td>       </tr>       <tr>           <td>13</td>           <td>寄成（前場）</td>           <td>0</td>       </tr>       <tr>           <td>14</td>           <td>寄成（後場）</td>           <td>0</td>       </tr>       <tr>           <td>15</td>           <td>引成（前場）</td>           <td>0</td>       </tr>       <tr>           <td>16</td>           <td>引成（後場）</td>           <td>0</td>       </tr>       <tr>           <td>17</td>           <td>IOC成行</td>           <td>0</td>       </tr>       <tr>           <td>20</td>           <td>指値</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>21</td>           <td>寄指（前場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>22</td>           <td>寄指（後場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>23</td>           <td>引指（前場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>24</td>           <td>引指（後場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>25</td>           <td>不成（前場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>26</td>           <td>不成（後場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>27</td>           <td>IOC指値</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>30</td>           <td>逆指値</td>           <td>指定なし<br>※AfterHitPriceで指定ください</td>       </tr>   </tbody> </table>
    attr_accessor :front_order_type

    # 注文価格<br>※FrontOrderTypeで成行を指定した場合、0を指定する。<br>※詳細について、”FrontOrderType”をご確認ください。
    attr_accessor :price

    # 注文有効期限<br> yyyyMMdd形式。<br> 「0」を指定すると、kabuステーション上の発注画面の「本日」に対応する日付として扱います。<br> 「本日」は直近の注文可能日となり、以下のように設定されます。<br> 引けまでの間 : 当日<br> 引け後       : 翌取引所営業日<br> 休前日       : 休日明けの取引所営業日<br> ※ 日替わりはkabuステーションが日付変更通知を受信したタイミングです。
    attr_accessor :expire_day

    attr_accessor :reverse_limit_order

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'password' => :'Password',
        :'symbol' => :'Symbol',
        :'exchange' => :'Exchange',
        :'security_type' => :'SecurityType',
        :'side' => :'Side',
        :'cash_margin' => :'CashMargin',
        :'margin_trade_type' => :'MarginTradeType',
        :'margin_premium_unit' => :'MarginPremiumUnit',
        :'deliv_type' => :'DelivType',
        :'fund_type' => :'FundType',
        :'account_type' => :'AccountType',
        :'qty' => :'Qty',
        :'close_position_order' => :'ClosePositionOrder',
        :'close_positions' => :'ClosePositions',
        :'front_order_type' => :'FrontOrderType',
        :'price' => :'Price',
        :'expire_day' => :'ExpireDay',
        :'reverse_limit_order' => :'ReverseLimitOrder'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'password' => :'String',
        :'symbol' => :'String',
        :'exchange' => :'Integer',
        :'security_type' => :'Integer',
        :'side' => :'String',
        :'cash_margin' => :'Integer',
        :'margin_trade_type' => :'Integer',
        :'margin_premium_unit' => :'Float',
        :'deliv_type' => :'Integer',
        :'fund_type' => :'String',
        :'account_type' => :'Integer',
        :'qty' => :'Integer',
        :'close_position_order' => :'Integer',
        :'close_positions' => :'Array<Positions>',
        :'front_order_type' => :'Integer',
        :'price' => :'Float',
        :'expire_day' => :'Integer',
        :'reverse_limit_order' => :'RequestSendOrderReverseLimitOrder'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KabustationClient::RequestSendOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KabustationClient::RequestSendOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      else
        self.password = nil
      end

      if attributes.key?(:'symbol')
        self.symbol = attributes[:'symbol']
      else
        self.symbol = nil
      end

      if attributes.key?(:'exchange')
        self.exchange = attributes[:'exchange']
      else
        self.exchange = nil
      end

      if attributes.key?(:'security_type')
        self.security_type = attributes[:'security_type']
      else
        self.security_type = nil
      end

      if attributes.key?(:'side')
        self.side = attributes[:'side']
      else
        self.side = nil
      end

      if attributes.key?(:'cash_margin')
        self.cash_margin = attributes[:'cash_margin']
      else
        self.cash_margin = nil
      end

      if attributes.key?(:'margin_trade_type')
        self.margin_trade_type = attributes[:'margin_trade_type']
      end

      if attributes.key?(:'margin_premium_unit')
        self.margin_premium_unit = attributes[:'margin_premium_unit']
      end

      if attributes.key?(:'deliv_type')
        self.deliv_type = attributes[:'deliv_type']
      else
        self.deliv_type = nil
      end

      if attributes.key?(:'fund_type')
        self.fund_type = attributes[:'fund_type']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      else
        self.account_type = nil
      end

      if attributes.key?(:'qty')
        self.qty = attributes[:'qty']
      else
        self.qty = nil
      end

      if attributes.key?(:'close_position_order')
        self.close_position_order = attributes[:'close_position_order']
      end

      if attributes.key?(:'close_positions')
        if (value = attributes[:'close_positions']).is_a?(Array)
          self.close_positions = value
        end
      end

      if attributes.key?(:'front_order_type')
        self.front_order_type = attributes[:'front_order_type']
      else
        self.front_order_type = nil
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      else
        self.price = nil
      end

      if attributes.key?(:'expire_day')
        self.expire_day = attributes[:'expire_day']
      else
        self.expire_day = nil
      end

      if attributes.key?(:'reverse_limit_order')
        self.reverse_limit_order = attributes[:'reverse_limit_order']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @password.nil?
        invalid_properties.push('invalid value for "password", password cannot be nil.')
      end

      if @symbol.nil?
        invalid_properties.push('invalid value for "symbol", symbol cannot be nil.')
      end

      if @exchange.nil?
        invalid_properties.push('invalid value for "exchange", exchange cannot be nil.')
      end

      if @security_type.nil?
        invalid_properties.push('invalid value for "security_type", security_type cannot be nil.')
      end

      if @side.nil?
        invalid_properties.push('invalid value for "side", side cannot be nil.')
      end

      if @cash_margin.nil?
        invalid_properties.push('invalid value for "cash_margin", cash_margin cannot be nil.')
      end

      if @deliv_type.nil?
        invalid_properties.push('invalid value for "deliv_type", deliv_type cannot be nil.')
      end

      if @account_type.nil?
        invalid_properties.push('invalid value for "account_type", account_type cannot be nil.')
      end

      if @qty.nil?
        invalid_properties.push('invalid value for "qty", qty cannot be nil.')
      end

      if @front_order_type.nil?
        invalid_properties.push('invalid value for "front_order_type", front_order_type cannot be nil.')
      end

      if @price.nil?
        invalid_properties.push('invalid value for "price", price cannot be nil.')
      end

      if @expire_day.nil?
        invalid_properties.push('invalid value for "expire_day", expire_day cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @password.nil?
      return false if @symbol.nil?
      return false if @exchange.nil?
      return false if @security_type.nil?
      return false if @side.nil?
      return false if @cash_margin.nil?
      return false if @deliv_type.nil?
      return false if @account_type.nil?
      return false if @qty.nil?
      return false if @front_order_type.nil?
      return false if @price.nil?
      return false if @expire_day.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          password == o.password &&
          symbol == o.symbol &&
          exchange == o.exchange &&
          security_type == o.security_type &&
          side == o.side &&
          cash_margin == o.cash_margin &&
          margin_trade_type == o.margin_trade_type &&
          margin_premium_unit == o.margin_premium_unit &&
          deliv_type == o.deliv_type &&
          fund_type == o.fund_type &&
          account_type == o.account_type &&
          qty == o.qty &&
          close_position_order == o.close_position_order &&
          close_positions == o.close_positions &&
          front_order_type == o.front_order_type &&
          price == o.price &&
          expire_day == o.expire_day &&
          reverse_limit_order == o.reverse_limit_order
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [password, symbol, exchange, security_type, side, cash_margin, margin_trade_type, margin_premium_unit, deliv_type, fund_type, account_type, qty, close_position_order, close_positions, front_order_type, price, expire_day, reverse_limit_order].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KabustationClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
