=begin
#kabuステーションAPI

## 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

The version of the OpenAPI document: 1.5

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module KabustationClient
  # 逆指値条件<br> ※FrontOrderTypeで逆指値を指定した場合のみ必須。
  class RequestSendOrderReverseLimitOrder
    # トリガ銘柄<br> ※未設定の場合はエラーになります。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>発注銘柄</td>     </tr>     <tr>       <td>2</td>       <td>NK225指数</td>     </tr>     <tr>       <td>3</td>       <td>TOPIX指数</td>     </tr>   </tbody> </table>
    attr_accessor :trigger_sec

    # トリガ価格<br> ※未設定の場合はエラーになります。<br> ※数字以外が設定された場合はエラーになります。
    attr_accessor :trigger_price

    # 以上／以下<br> ※未設定の場合はエラーになります。<br> ※1、2以外が指定された場合はエラーになります。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>以下</td>     </tr>     <tr>       <td>2</td>       <td>以上</td>     </tr>   </tbody> </table>
    attr_accessor :under_over

    # ヒット後執行条件<br> ※未設定の場合はエラーになります。<br> ※1、2、3以外が指定された場合はエラーになります。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>成行</td>     </tr>     <tr>       <td>2</td>       <td>指値</td>     </tr>     <tr>       <td>3</td>       <td>不成</td>     </tr>   </tbody> </table>
    attr_accessor :after_hit_order_type

    # ヒット後注文価格<br> ※未設定の場合はエラーになります。<br> ※数字以外が設定された場合はエラーになります。<br><br> ヒット後執行条件に従い、下記のようにヒット後注文価格を設定してください。  <table>   <thead>       <tr>           <th>ヒット後執行条件</th>           <th>設定価格</th>       </tr>   </thead>   <tbody>     <tr>       <td>成行</td>       <td>0</td>     </tr>     <tr>       <td>指値</td>       <td>指値の単価</td>     </tr>     <tr>       <td>不成</td>       <td>不成の単価</td>     </tr>   </tbody> </table>
    attr_accessor :after_hit_price

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'trigger_sec' => :'TriggerSec',
        :'trigger_price' => :'TriggerPrice',
        :'under_over' => :'UnderOver',
        :'after_hit_order_type' => :'AfterHitOrderType',
        :'after_hit_price' => :'AfterHitPrice'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'trigger_sec' => :'Integer',
        :'trigger_price' => :'Float',
        :'under_over' => :'Integer',
        :'after_hit_order_type' => :'Integer',
        :'after_hit_price' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KabustationClient::RequestSendOrderReverseLimitOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KabustationClient::RequestSendOrderReverseLimitOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'trigger_sec')
        self.trigger_sec = attributes[:'trigger_sec']
      else
        self.trigger_sec = nil
      end

      if attributes.key?(:'trigger_price')
        self.trigger_price = attributes[:'trigger_price']
      else
        self.trigger_price = nil
      end

      if attributes.key?(:'under_over')
        self.under_over = attributes[:'under_over']
      else
        self.under_over = nil
      end

      if attributes.key?(:'after_hit_order_type')
        self.after_hit_order_type = attributes[:'after_hit_order_type']
      else
        self.after_hit_order_type = nil
      end

      if attributes.key?(:'after_hit_price')
        self.after_hit_price = attributes[:'after_hit_price']
      else
        self.after_hit_price = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @trigger_sec.nil?
        invalid_properties.push('invalid value for "trigger_sec", trigger_sec cannot be nil.')
      end

      if @trigger_price.nil?
        invalid_properties.push('invalid value for "trigger_price", trigger_price cannot be nil.')
      end

      if @under_over.nil?
        invalid_properties.push('invalid value for "under_over", under_over cannot be nil.')
      end

      if @after_hit_order_type.nil?
        invalid_properties.push('invalid value for "after_hit_order_type", after_hit_order_type cannot be nil.')
      end

      if @after_hit_price.nil?
        invalid_properties.push('invalid value for "after_hit_price", after_hit_price cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @trigger_sec.nil?
      return false if @trigger_price.nil?
      return false if @under_over.nil?
      return false if @after_hit_order_type.nil?
      return false if @after_hit_price.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          trigger_sec == o.trigger_sec &&
          trigger_price == o.trigger_price &&
          under_over == o.under_over &&
          after_hit_order_type == o.after_hit_order_type &&
          after_hit_price == o.after_hit_price
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [trigger_sec, trigger_price, under_over, after_hit_order_type, after_hit_price].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KabustationClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
