=begin
#kabuステーションAPI

## 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

The version of the OpenAPI document: 1.5

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module KabustationClient
  class RankingByMarginResponseRankingInner
    # 順位<br>※ランキング内で同じ順位が返却される場合があります（10位が2件など）
    attr_accessor :_false

    # 銘柄コード
    attr_accessor :symbol

    # 銘柄名称
    attr_accessor :symbol_name

    # 売残（千株）
    attr_accessor :sell_rapid_payment_percentage

    # 売残前週比
    attr_accessor :sell_last_week_ratio

    # 買残（千株）
    attr_accessor :buy_rapid_payment_percentage

    # 買残前週比
    attr_accessor :buy_last_week_ratio

    # 倍率
    attr_accessor :ratio

    # 市場名
    attr_accessor :exchange_name

    # 業種名
    attr_accessor :category_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_false' => :'false',
        :'symbol' => :'Symbol',
        :'symbol_name' => :'SymbolName',
        :'sell_rapid_payment_percentage' => :'SellRapidPaymentPercentage',
        :'sell_last_week_ratio' => :'SellLastWeekRatio',
        :'buy_rapid_payment_percentage' => :'BuyRapidPaymentPercentage',
        :'buy_last_week_ratio' => :'BuyLastWeekRatio',
        :'ratio' => :'Ratio',
        :'exchange_name' => :'ExchangeName',
        :'category_name' => :'CategoryName'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_false' => :'Integer',
        :'symbol' => :'String',
        :'symbol_name' => :'String',
        :'sell_rapid_payment_percentage' => :'Float',
        :'sell_last_week_ratio' => :'Float',
        :'buy_rapid_payment_percentage' => :'Float',
        :'buy_last_week_ratio' => :'Float',
        :'ratio' => :'Float',
        :'exchange_name' => :'String',
        :'category_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KabustationClient::RankingByMarginResponseRankingInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KabustationClient::RankingByMarginResponseRankingInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_false')
        self._false = attributes[:'_false']
      end

      if attributes.key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.key?(:'symbol_name')
        self.symbol_name = attributes[:'symbol_name']
      end

      if attributes.key?(:'sell_rapid_payment_percentage')
        self.sell_rapid_payment_percentage = attributes[:'sell_rapid_payment_percentage']
      end

      if attributes.key?(:'sell_last_week_ratio')
        self.sell_last_week_ratio = attributes[:'sell_last_week_ratio']
      end

      if attributes.key?(:'buy_rapid_payment_percentage')
        self.buy_rapid_payment_percentage = attributes[:'buy_rapid_payment_percentage']
      end

      if attributes.key?(:'buy_last_week_ratio')
        self.buy_last_week_ratio = attributes[:'buy_last_week_ratio']
      end

      if attributes.key?(:'ratio')
        self.ratio = attributes[:'ratio']
      end

      if attributes.key?(:'exchange_name')
        self.exchange_name = attributes[:'exchange_name']
      end

      if attributes.key?(:'category_name')
        self.category_name = attributes[:'category_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _false == o._false &&
          symbol == o.symbol &&
          symbol_name == o.symbol_name &&
          sell_rapid_payment_percentage == o.sell_rapid_payment_percentage &&
          sell_last_week_ratio == o.sell_last_week_ratio &&
          buy_rapid_payment_percentage == o.buy_rapid_payment_percentage &&
          buy_last_week_ratio == o.buy_last_week_ratio &&
          ratio == o.ratio &&
          exchange_name == o.exchange_name &&
          category_name == o.category_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_false, symbol, symbol_name, sell_rapid_payment_percentage, sell_last_week_ratio, buy_rapid_payment_percentage, buy_last_week_ratio, ratio, exchange_name, category_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KabustationClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
