=begin
#kabuステーションAPI

## 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

The version of the OpenAPI document: 1.5

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module KabustationClient
  class RegulationsResponseRegulationsInfoInner
    # 規制市場 <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>全対象</td>     </tr>     <tr>       <td>1</td>       <td>東証</td>     </tr>     <tr>       <td>3</td>       <td>名証</td>     </tr>     <tr>       <td>5</td>       <td>福証</td>     </tr>     <tr>       <td>6</td>       <td>札証</td>     </tr>     <tr>       <td>9</td>       <td>SOR</td>     </tr>     <tr>       <td>10</td>       <td>CXJ</td>     </tr>     <tr>       <td>21</td>       <td>JNX</td>     </tr>   </tbody> </table>
    attr_accessor :exchange

    # 規制取引区分<br> ※空売り規制の場合、「4：新規」 <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>全対象</td>     </tr>     <tr>       <td>1</td>       <td>現物</td>     </tr>     <tr>       <td>2</td>       <td>信用新規（制度）</td>     </tr>     <tr>       <td>3</td>       <td>信用新規（一般）</td>     </tr>     <tr>       <td>4</td>       <td>新規</td>     </tr>     <tr>       <td>5</td>       <td>信用返済（制度）</td>     </tr>     <tr>       <td>6</td>       <td>信用返済（一般）</td>     </tr>     <tr>       <td>7</td>       <td>返済</td>     </tr>     <tr>       <td>8</td>       <td>品受</td>     </tr>     <tr>       <td>9</td>       <td>品渡</td>     </tr>   </tbody> </table>
    attr_accessor :product

    # 規制売買<br> ※空売り規制の場合、「1：売」 <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>全対象</td>     </tr>     <tr>       <td>1</td>       <td>売</td>     </tr>     <tr>       <td>2</td>       <td>買</td>     </tr>   </tbody> </table>
    attr_accessor :side

    # 理由<br>※空売り規制の場合、「空売り規制」
    attr_accessor :reason

    # 制限開始日<br>yyyy/MM/dd HH:mm形式  <br>※空売り規制の場合、null
    attr_accessor :limit_start_day

    # 制限終了日<br>yyyy/MM/dd HH:mm形式  <br>※空売り規制の場合、null
    attr_accessor :limit_end_day

    # コンプライアンスレベル<br> ※空売り規制の場合、null <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>０</td>       <td>規制無し</td>     </tr>     <tr>       <td>１</td>       <td>ワーニング</td>     </tr>     <tr>       <td>２</td>       <td>エラー</td>     </tr>   </tbody> </table>
    attr_accessor :level

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'exchange' => :'Exchange',
        :'product' => :'Product',
        :'side' => :'Side',
        :'reason' => :'Reason',
        :'limit_start_day' => :'LimitStartDay',
        :'limit_end_day' => :'LimitEndDay',
        :'level' => :'Level'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'exchange' => :'Integer',
        :'product' => :'Integer',
        :'side' => :'String',
        :'reason' => :'String',
        :'limit_start_day' => :'String',
        :'limit_end_day' => :'String',
        :'level' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KabustationClient::RegulationsResponseRegulationsInfoInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KabustationClient::RegulationsResponseRegulationsInfoInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'exchange')
        self.exchange = attributes[:'exchange']
      end

      if attributes.key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.key?(:'side')
        self.side = attributes[:'side']
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.key?(:'limit_start_day')
        self.limit_start_day = attributes[:'limit_start_day']
      end

      if attributes.key?(:'limit_end_day')
        self.limit_end_day = attributes[:'limit_end_day']
      end

      if attributes.key?(:'level')
        self.level = attributes[:'level']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          exchange == o.exchange &&
          product == o.product &&
          side == o.side &&
          reason == o.reason &&
          limit_start_day == o.limit_start_day &&
          limit_end_day == o.limit_end_day &&
          level == o.level
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [exchange, product, side, reason, limit_start_day, limit_end_day, level].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KabustationClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
