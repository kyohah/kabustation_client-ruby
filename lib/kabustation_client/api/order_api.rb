=begin
#kabuステーションAPI

## 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

The version of the OpenAPI document: 1.5

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module KabustationClient
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 注文取消
    # 注文を取消します
    # @param request_cancel_order [RequestCancelOrder] 
    # @param [Hash] opts the optional parameters
    # @return [OrderSuccess]
    def cancelorder_put(request_cancel_order, opts = {})
      data, _status_code, _headers = cancelorder_put_with_http_info(request_cancel_order, opts)
      data
    end

    # 注文取消
    # 注文を取消します
    # @param request_cancel_order [RequestCancelOrder] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderSuccess, Integer, Hash)>] OrderSuccess data, response status code and response headers
    def cancelorder_put_with_http_info(request_cancel_order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.cancelorder_put ...'
      end
      # verify the required parameter 'request_cancel_order' is set
      if @api_client.config.client_side_validation && request_cancel_order.nil?
        fail ArgumentError, "Missing the required parameter 'request_cancel_order' when calling OrderApi.cancelorder_put"
      end
      # resource path
      local_var_path = '/cancelorder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_cancel_order)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.cancelorder_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#cancelorder_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 注文発注（先物）
    # 先物銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
    # @param request_send_order_deriv_future [RequestSendOrderDerivFuture] 
    # @param [Hash] opts the optional parameters
    # @return [OrderSuccess]
    def sendoder_future_post(request_send_order_deriv_future, opts = {})
      data, _status_code, _headers = sendoder_future_post_with_http_info(request_send_order_deriv_future, opts)
      data
    end

    # 注文発注（先物）
    # 先物銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
    # @param request_send_order_deriv_future [RequestSendOrderDerivFuture] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderSuccess, Integer, Hash)>] OrderSuccess data, response status code and response headers
    def sendoder_future_post_with_http_info(request_send_order_deriv_future, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.sendoder_future_post ...'
      end
      # verify the required parameter 'request_send_order_deriv_future' is set
      if @api_client.config.client_side_validation && request_send_order_deriv_future.nil?
        fail ArgumentError, "Missing the required parameter 'request_send_order_deriv_future' when calling OrderApi.sendoder_future_post"
      end
      # resource path
      local_var_path = '/sendorder/future'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_send_order_deriv_future)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.sendoder_future_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#sendoder_future_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 注文発注（オプション）
    # オプション銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
    # @param request_send_order_deriv_option [RequestSendOrderDerivOption] 
    # @param [Hash] opts the optional parameters
    # @return [OrderSuccess]
    def sendorder_option_post(request_send_order_deriv_option, opts = {})
      data, _status_code, _headers = sendorder_option_post_with_http_info(request_send_order_deriv_option, opts)
      data
    end

    # 注文発注（オプション）
    # オプション銘柄の注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
    # @param request_send_order_deriv_option [RequestSendOrderDerivOption] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderSuccess, Integer, Hash)>] OrderSuccess data, response status code and response headers
    def sendorder_option_post_with_http_info(request_send_order_deriv_option, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.sendorder_option_post ...'
      end
      # verify the required parameter 'request_send_order_deriv_option' is set
      if @api_client.config.client_side_validation && request_send_order_deriv_option.nil?
        fail ArgumentError, "Missing the required parameter 'request_send_order_deriv_option' when calling OrderApi.sendorder_option_post"
      end
      # resource path
      local_var_path = '/sendorder/option'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_send_order_deriv_option)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.sendorder_option_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#sendorder_option_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 注文発注（現物・信用）
    # 注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
    # @param request_send_order [RequestSendOrder] 
    # @param [Hash] opts the optional parameters
    # @return [OrderSuccess]
    def sendorder_post(request_send_order, opts = {})
      data, _status_code, _headers = sendorder_post_with_http_info(request_send_order, opts)
      data
    end

    # 注文発注（現物・信用）
    # 注文を発注します。&lt;br&gt; 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
    # @param request_send_order [RequestSendOrder] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderSuccess, Integer, Hash)>] OrderSuccess data, response status code and response headers
    def sendorder_post_with_http_info(request_send_order, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.sendorder_post ...'
      end
      # verify the required parameter 'request_send_order' is set
      if @api_client.config.client_side_validation && request_send_order.nil?
        fail ArgumentError, "Missing the required parameter 'request_send_order' when calling OrderApi.sendorder_post"
      end
      # resource path
      local_var_path = '/sendorder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_send_order)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.sendorder_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#sendorder_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
