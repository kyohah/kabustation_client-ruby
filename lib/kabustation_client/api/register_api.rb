=begin
#kabuステーションAPI

## 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

The version of the OpenAPI document: 1.5

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module KabustationClient
  class RegisterApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 銘柄登録
    # PUSH配信する銘柄を登録します。<br> API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
    # @param request_register [RequestRegister] 登録する銘柄のリスト
    # @param [Hash] opts the optional parameters
    # @return [RegistSuccess]
    def register_put(request_register, opts = {})
      data, _status_code, _headers = register_put_with_http_info(request_register, opts)
      data
    end

    # 銘柄登録
    # PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
    # @param request_register [RequestRegister] 登録する銘柄のリスト
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistSuccess, Integer, Hash)>] RegistSuccess data, response status code and response headers
    def register_put_with_http_info(request_register, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegisterApi.register_put ...'
      end
      # verify the required parameter 'request_register' is set
      if @api_client.config.client_side_validation && request_register.nil?
        fail ArgumentError, "Missing the required parameter 'request_register' when calling RegisterApi.register_put"
      end
      # resource path
      local_var_path = '/register'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_register)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"RegisterApi.register_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegisterApi#register_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 銘柄登録全解除
    # API登録銘柄リストに登録されている銘柄をすべて解除します
    # @param [Hash] opts the optional parameters
    # @return [UnregisterAllSuccess]
    def unregister_all_put(opts = {})
      data, _status_code, _headers = unregister_all_put_with_http_info(opts)
      data
    end

    # 銘柄登録全解除
    # API登録銘柄リストに登録されている銘柄をすべて解除します
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnregisterAllSuccess, Integer, Hash)>] UnregisterAllSuccess data, response status code and response headers
    def unregister_all_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegisterApi.unregister_all_put ...'
      end
      # resource path
      local_var_path = '/unregister/all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnregisterAllSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"RegisterApi.unregister_all_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegisterApi#unregister_all_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 銘柄登録解除
    # API登録銘柄リストに登録されている銘柄を解除します
    # @param request_unregister [RequestUnregister] 登録解除する銘柄のリスト
    # @param [Hash] opts the optional parameters
    # @return [RegistSuccess]
    def unregister_put(request_unregister, opts = {})
      data, _status_code, _headers = unregister_put_with_http_info(request_unregister, opts)
      data
    end

    # 銘柄登録解除
    # API登録銘柄リストに登録されている銘柄を解除します
    # @param request_unregister [RequestUnregister] 登録解除する銘柄のリスト
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistSuccess, Integer, Hash)>] RegistSuccess data, response status code and response headers
    def unregister_put_with_http_info(request_unregister, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegisterApi.unregister_put ...'
      end
      # verify the required parameter 'request_unregister' is set
      if @api_client.config.client_side_validation && request_unregister.nil?
        fail ArgumentError, "Missing the required parameter 'request_unregister' when calling RegisterApi.unregister_put"
      end
      # resource path
      local_var_path = '/unregister'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_unregister)

      # return_type
      return_type = opts[:debug_return_type] || 'RegistSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"RegisterApi.unregister_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegisterApi#unregister_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
